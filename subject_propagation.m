% This program is use for Debri Colision Prediction
% 
% Based on OrbProp developed by Damon P. DeLuca, USN CIV
% Email: damondeluca@gmail.com
% Adapted and Modified by Phd. Eliecer Hernandez, ABAE
% Email: ehernandez@abae.gob.ve
%
% Two files should be provided
%   First the configuration file named config.dcp
%       which will include the Code and TLE of the satellite that we want
%       to supervise
%
%   Second the TLE catalog:  named catalog.tle
%       Updated catalog of objects provided by NORAD and downloaded through
%       space-track
%
% NOTE: Output generated by this program has not been validated, other than 
% ensuring close agreement with AGI STK results.
%
% This script runs the SGP4 propagator using the manual method, afspc, with
% WGS72 ellipsoid. SPG4 output in ManualOut.out is transformed from TEME
% to ECEF using functions from David Vallado. The transformation teme2ecef
% is executed for each line of output in ManualOutput.out.
%  
% Input: See GUI. TLE input is a single two line file. 
%
% Output: 
%
%  
%SGP4 functions were % downloaded from www.celestrak.com during the week    
%of 18 JAN 2016. Credit below:
% Author:
%   Jeff Beck
%   beckja@alumni.lehigh.edu
%%
global  mu opsmode defaultbrowse infile outfile idebug dbgfile satrec startmfe stopmfe deltamin

clear adum grob azob HorEl ElSR ElGR


%% Set up

whichconst = 72;
rad = 180.0 / pi;

% Epoch

%startedit='03-Apr-2016 00:00:00'; % UTC start time  01-Feb-2016 02:25:03
%stopedit ='03-Aug-2016 00:00:00'; % UTC stop time  01-Feb-2016 02:25:03
%s1= 15; %step resolution (min)


%% Loading Files both input & output

inpath='\ExampleInput\vrss1.txt';
infilename = inpath;
infile = fopen(infilename, 'r');
if (infile == -1)
    fprintf(1,'Failed to open file: %s\n', infilename);
    return;
end


% output file for RV Distance Date etc
outpath = 'subject_output.txt';
outfilename = outpath;
outfile = fopen(outfilename, 'wt+');
if (outfile == -1)
    fprintf(1,'Failed to open file: %s\n', outfilename);
    return;
end

%% Load TLE from file

opsmode= 'a';
typerun = 'm';
%typeinput = 'e'; %     typeinput = input('input mfe, epoch (YMDHMS), or dayofyr approach, m,e,d:','s');

longstr1 = fgets(infile, 130);
while ( (longstr1(1) == '#') && (feof(infile) == 0) )
    longstr1 = fgets(infile, 130);
end
longstr2 = fgets(infile, 130);
catno = strtrim(longstr1(3:7)); % Satelite Number
%                // convert the char string to sgp4 elements
%                // includes initialization of sgp4
[satrec, startmfe, stopmfe, deltamin] = twoline2rv( whichconst, ...
longstr1, longstr2);
    


%% main routine

% --- Executes on button press in run.

%   add operation smode for afspc (a) or improved (i)
% opsmode= input('input opsmode afspc a, improved i ','s');
% opsmode= 'a'; %EH comented

%         //typerun = 'c' compare 1 year of full satcat data
%         //typerun = 'v' verification run, requires modified elm file with
%         //typerun = 'm' maunual operation- either mfe, epoch, or dayof yr
%         //              start stop and delta times

%     typerun = input('input type of run c, v, m: ','s');

typerun = 'm';

if (typerun == 'm')
    typeinput = 'e';
else
    typeinput = 'e';
end;

whichconst = 72;
rad = 180.0 / pi;

%outfile = fopen('ManualOutput.out', 'wt');


%% ----------------- test simple propagation -------------------

longstr1 = fgets(infile, 130);
while ( (longstr1(1) == '#') && (feof(infile) == 0) )
    longstr1 = fgets(infile, 130);
end


[~, ro ,vo] = sgp4 (satrec,  0.0);  %[satrec, ro ,vo] = sgp4 (satrec,  0.0);

tsince = startmfe;

%                // check so the first value isn't written twice
if ( abs(tsince) > 1.0e-8 )
    tsince = tsince - deltamin;
end

%%     loop to perform the main propagation

%                
while ((tsince < stopmfe) && (satrec.error == 0))
    
    tsince = tsince + deltamin;
    
    if(tsince > stopmfe)
        tsince = stopmfe;
    end
    
    [~, ro, vo] = sgp4 (satrec,  tsince);  % [satrec, ro, vo] = sgp4 (satrec,  tsince);
    if (satrec.error > 0)
        fprintf(1,'# *** error: t:= %f *** code = %3i\n', tsince, satrec.error);
    end
    
    if (satrec.error == 0)
 %       if ((typerun ~= 'v') && (typerun ~= 'c'))
 %           jd = satrec.jdsatepoch + tsince/1440.0;
 %           [year,mon,day,hr,minute,sec] = invjday ( jd );
 %           
 %           %Print the below for TEME state
 %           fprintf(outfile,...
 %               ' %16.8f %16.8f %16.8f %12.9f %12.9f %12.9f %5i%3i%3i %2i %2i %9.6f \n',...
 %               ro(1),ro(2),ro(3),vo(1),vo(2),vo(3),year,mon,day,hr,minute,sec );
 %           
 %           [p,a,ecc,incl,node,argp,nu,m,arglat,truelon,lonper ] = rv2coe (ro,vo,mu);
 %       else
            jd = satrec.jdsatepoch + tsince/1440.0;
            [year,mon,day,hr,minute,sec] = invjday ( jd );
            
            fprintf(outfile, ' %16.8f %16.8f %16.8f %16.8f %12.9f %12.9f %12.9f',...
                tsince,ro(1),ro(2),ro(3),vo(1),vo(2),vo(3));
 
            [p,a,ecc,incl,node,argp,nu,m,arglat,truelon,lonper ] = rv2coe (ro,vo,mu);
            
            fprintf(outfile, ' %14.6f %8.6f %10.5f %10.5f %10.5f %10.5f %10.5f %5i%3i%3i %2i:%2i:%9.6f \n',...
                a, ecc, incl*rad, node*rad, argp*rad, nu*rad, m*rad,year,mon,day,hr,minute,sec );
 %       end
    end %// if satrec.error == 0
    
end %// while propagating the orbit


%% Closing Flies




fclose('all');





%% Ploting trajectory based on R

outfile=fopen('ManualOutput.txt');
s=textscan(outfile,' %f %f %f %f %f %f %d %d %d %d %d %d');
fclose(outfile);
x=s{1};
y=s{2};
z=s{3};
u=s{4};
v=s{5};
w=s{6};

close all
set(gcf,'Menubar','default','Name','Orbit Visualization', ... 
    'NumberTitle','off','Position',[10,350,750,750], ... 
    'Color',[0.38 0.26 0.67]); 
lim=(1+ecc)*a;%Setting the limits of the graph
clf
axis([-lim, lim, -lim, lim, -lim, lim])	
view(150,15) 
axis equal
shg
hold on
grid on
title('Orbital Visualization');

equat_rad=6378.13700;
    polar_rad=6356.7523142;
    [xx, yy, zz]=ellipsoid (0,0,0,equat_rad, equat_rad, polar_rad);
    load('topo.mat','topo','topomap1');
    topo2 = [topo(:,181:360) topo(:,1:180)];
    pro.FaceColor= 'texture';
    pro.EdgeColor = 'none';
    pro.FaceLighting = 'phong';
    pro.Cdata = topo2;
   earth= surface(xx,yy,zz,pro);
    colormap(topomap1)

    x0=0;
    y0=0;
    z0=0;
    for k=1:length(x)
     line([x0 x(k)],[y0 y(k)],[z0 z(k)]);
     x0=x(k);
     y0=y(k);
     z0=z(k);
     pause (0.01);
    end